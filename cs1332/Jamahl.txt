public List<T> levelorder() {
        List<T> list = new ArrayList<>();
        LinkedList<BSTNode<T>> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            BSTNode<T> temp = q.removeFirst();
            if (temp != null) {
                list.add(temp.getData());
                q.add(temp.getLeft());
                q.add(temp.getRight());
            }
        }
        return list;
    }

    /**
     * Returns the height of the root of the tree.
     *
     * This must be done recursively.
     *
     * A node's height is defined as max(left.height, right.height) + 1. A
     * leaf node has a height of 0 and a null child has a height of -1.
     *
     * Must be O(n).
     *
     * @return the height of the root of the tree, -1 if the tree is empty
     */
    public int height() {
        if (size == 0) {
            return -1;
        } else if (size == 1) {
            return 0;
        } else {
            return heightR(root);
        }
    }

    /**
     * Recursive helper for height method
     *
     * @param curr the current node
     * @return int representing height of tree
     */
    private int heightR(BSTNode<T> curr) {
        if (curr == null) {
            return -1;
        }
        int leftHeight = heightR(curr.getLeft());
        int rightHeight = heightR(curr.getRight());

        if (leftHeight > rightHeight) {
            return 1 + leftHeight;
        } else {
            return 1 + rightHeight;
        }
    }
    /**
     * Clears the tree.
     *
     * Clears all data and resets the size.
     *
     * Must be O(1).
     */
    public void clear() {
        root = null;
        size = 0;
    }

    /**
     * Finds and retrieves the k-largest elements from the BST in sorted order,
     * least to greatest.
     *
     * This must be done recursively.
     *
     * In most cases, this method will not need to traverse the entire tree to
     * function properly, so you should only traverse the branches of the tree
     * necessary to get the data and only do so once. Failure to do so will
     * result in an efficiency penalty.
     *
     * EXAMPLE: Given the BST below composed of Integers:
     *
     *                50
     *              /    \
     *            25      75
     *           /  \
     *          12   37
     *         /  \    \
     *        10  15    40
     *           /
     *          13
     *
     * kLargest(5) should return the list [25, 37, 40, 50, 75].
     * kLargest(3) should return the list [40, 50, 75].
     *
     * Should have a running time of O(log(n) + k) for a balanced tree and a
     * worst case of O(n + k).
     *
     * @param k the number of largest elements to return
     * @return sorted list consisting of the k largest elements
     * @throws java.lang.IllegalArgumentException if k > n, the number of data
     *                                            in the BST
     */
    public List<T> kLargest(int k) {
        LinkedList<T> list = new LinkedList<>();
        if (k > size) {
            throw new IllegalArgumentException("Your int must be less than the size of the BST");
        } else {
            kLargestR(root, k, list);
        }
        return list;
    }

    /**
     * Recursive helper for kLargest method
     *
     * @param curr the current node
     * @param k the number of largest integers to be returned
     * @param list the list of k largest integers to be returned
     */
    private void kLargestR(BSTNode<T> curr, int k, LinkedList<T> list) {
        if (curr != null) {
            kLargestR(curr.getRight(), k, list);
            if (k > list.size()) {
                list.addFirst((curr.getData()));
            }
            kLargestR(curr.getLeft(), k, list);
        }
    }


    /**
     * Returns the root of the tree.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the root of the tree
     */
    public BSTNode<T> getRoot() {
        // DO NOT MODIFY THIS METHOD!
        return root;
    }

    /**
     * Returns the size of the tree.
     *
     * For grading purposes only. You shouldn't need to use this method since
     * you have direct access to the variable.
     *
     * @return the size of the tree
     */
    public int size() {
        // DO NOT MODIFY THIS METHOD!
        return size;
    }
}